// Generated by CoffeeScript 2.3.0
(function() {
  /* abstract
  */
  gg.Man = (function() {
    class Man extends gg.Sprite {
      constructor(props) {
        var f, m, n, sprite;
        n = 667 / 29;
        f = 1 / n;
        m = .11;
        sprite = {
          elevation: 3,
          path: 'nontile/man/template.png',
          normalPath: 'nontile/man/normal.png',
          normal: true,
          hasShadow: true,
          sprite: {
            width: 29,
            height: 29
          },
          sheet: {
            width: 261,
            height: 667
          }
        };
        super(props, sprite);
        this.other = {
          frames: 8,
          moment: .08,
          y: f * --n
        };
        this.walk = {
          frames: 8,
          moment: m,
          y: f * --n
        };
        this.run = {
          frames: 8,
          moment: .08,
          y: f * --n
        };
        this.punch = {
          frames: 8,
          moment: m,
          y: f * --n
        };
        this.walkpunch = {
          frames: 8,
          moment: m,
          y: f * --n
        };
        this.runpunch = {
          frames: 8,
          moment: .08,
          y: f * --n
        };
        this.slash = {
          frames: 8,
          moment: m,
          y: f * --n,
          inverse: true,
          start: 3
        };
        this.walkslash = {
          frames: 8,
          moment: m,
          y: f * --n,
          inverse: true,
          start: 3
        };
        this.runslash = {
          frames: 8,
          moment: .08,
          y: f * --n,
          inverse: true,
          start: 3
        };
        this.walkgun = {
          frames: 8,
          moment: m,
          y: f * --n
        };
        this.rungun = {
          frames: 8,
          moment: .08,
          y: f * --n
        };
        this.walkrifle = {
          frames: 8,
          moment: m,
          y: f * --n
        };
        this.runrifle = {
          frames: 8,
          moment: .08,
          y: f * --n
        };
        this.falls = {
          y: f * --n
        };
        this.scratch = {
          frames: 8,
          moment: .14,
          y: f * --n
        };
        this.jump = {
          frames: 8,
          moment: m,
          y: f * --n
        };
        this.door = {
          frames: 8,
          moment: .14,
          y: f * --n
        };
        this.sit = {
          frames: 5,
          moment: m,
          y: f * --n
        };
        this.drop = {
          frames: 8,
          moment: m,
          y: f * --n
        };
        this.trip1 = {
          frames: 9,
          moment: m,
          y: f * --n
        };
        this.trip2 = {
          frames: 8,
          moment: m,
          y: f * --n
        };
        this.drown = {
          frames: 8,
          moment: m,
          y: f * --n
        };
        this.cardoor = {
          frames: 8,
          moment: .13,
          y: f * --n,
          start: 2
        };
        this.understeer = true;
        this.type = 'Man';
        this.build();
        this.car = null;
        this.dead = false;
        this.freeze = false;
        this._MAN = {
          freeze: false,
          moving: false,
          turning: false,
          _cd: null,
          _yc: null,
          car: null,
          using: null,
          strafing: false,
          gallop: false,
          holding: false,
          recoiling: 0,
          opening: false,
          sitting: false,
          scratching: false
        };
        this.parts = [];
        // @dressup() if props.states?.o
        gg.clonemanmaterial(this);
        this.shadow.material = gg.Man.prototype.shadow;
        this.state(props, true);
        this.embody(); // if not props.states?.d
        this.grubble();
      }

      dtor() {
        if (this.dynamicBody) {
          gg.world.DestroyBody(this.dynamicBody);
        }
        super.dtor();
        return 1;
      }

      // override
      embody() {
        this.bodyDef = new box2d.b2BodyDef();
        this.bodyDef.type = box2d.b2BodyType.b2_dynamicBody;
        this.bodyDef.allowSleep = false;
        this.circleShape = new box2d.b2CircleShape(4.1 / gg.scaling);
        this.fixtureDef = new box2d.b2FixtureDef;
        this.fixtureDef.shape = this.circleShape;
        this.fixtureDef.density = 1;
        this.fixtureDef.filter.categoryBits = gg.masks.organic;
        this.fixtureDef.filter.maskBits = gg.masks.solid | gg.masks.organic;
        this.bodyDef.position.Set(this.props.x / gg.scaling, this.props.y / gg.scaling);
        this.dynamicBody = gg.world.CreateBody(this.bodyDef);
        this.dynamicBody.SetTransform(this.dynamicBody.GetPosition(), this.props.r);
        this.fixture = this.dynamicBody.CreateFixture(this.fixtureDef);
        return true;
      }

      present(bool) { // like a premature dtor
        if (bool == null) {
          bool = true;
        }
        this.mesh.visible = bool;
        this.shadow.visible = bool;
        
        // part.mesh.visible = bool for part in @parts # out
        // @gun.shadow.visible = bool
        this.frame(0, this.other.y);
        return 1;
      }

      dressup(o) {
        var base, i, j, parts, ref, s;
        if (o === this.oldoutfit) {
          return;
        }
        if (this === gg.ply) {
          console.log(o);
        }
        base = JSON.parse(JSON.stringify(this.sprite));
        base.hasShadow = false;
        parts = o || ((ref = this.props.states) != null ? ref.o : void 0) || 'susnjepoph';
        for (i = j = 0; j <= 4; i = ++j) {
          s = gg.Man.prototype.parts[parts.substring(i * 2, i * 2 + 2)];
          this.parts.push(`nontile/man/${s}.png`);
        }
        this.parts.push('nontile/man/empty.png');
        this.skin = this.parts[0];
        this.feet = this.parts[1];
        this.legs = this.parts[2];
        this.body = this.parts[3];
        this.hair = this.parts[4];
        this.gun = this.parts[5];
        this.material.uniforms.skin.value = gg.loadSty(this.skin);
        this.material.uniforms.feet.value = gg.loadSty(this.feet);
        this.material.uniforms.legs.value = gg.loadSty(this.legs);
        this.material.uniforms.body.value = gg.loadSty(this.body);
        this.material.uniforms.hair.value = gg.loadSty(this.hair);
        this.material.uniforms.gun.value = gg.loadSty(this.gun);
        // @material.uniforms.armed.value = false
        this.oldoutfit = parts;
        return 1;
      }

      // override
      patch(o) {
        super.patch(o);
        this.state(o);
        return true;
      }

      // override
      frame(i, y, geometry) {
        var a;
        a = super.frame(i, y, geometry);
        return 1;
      }

      // override
      pose() {
        super.pose();
        return 1;
      }

      // override
      step() {
        super.step();
        if (this.dead) {
          this.pose();
          return;
        }
        if (this.props.net) {
          if (this.r >= gg.C.PII) {
            this.r = this.r - gg.C.PII;
          } else if (this.r <= 0) {
            this.r = gg.C.PII - this.r;
          }
          if (this.dynamicBody != null) {
            this.dynamicBody.SetPosition(new box2d.b2Vec2(this.props.x / gg.scaling, this.props.y / gg.scaling));
            this.dynamicBody.SetTransform(this.dynamicBody.GetPosition(), this.props.r);
            this.dynamicBody.SetAngularVelocity(0);
            this.dynamicBody.SetLinearVelocity(new box2d.b2Vec2(0, 0));
          }
          //if not @_MAN.moving
          this._MAN.moving = Math.abs(this.adds[0]) > .08 || Math.abs(this.adds[1]) > .08;
        }
        this.animate();
        this.pose();
        return 1;
      }

      state(o, first = false) {
        var STATE, car, running, walking;
        // super o
        if (o.states == null) {
          return;
        }
        STATE = o.states;
        if (STATE.o != null) {
          this.dressup(STATE.o); // outfit
        }
        if (STATE.scratch != null) {
          console.log('scratch head');
          this._MAN.scratching = true;
          gg.anim.call(this.scratch, true);
        }
        if (STATE.yc != null) {
          car = gg.net.visuals[STATE.yc.i];
          this._MAN._yc = STATE.yc;
          this._MAN.car = car || null;
          this._MAN.opening = true;
          this.freeze = true;
          console.log('yc your car', STATE.yc);
        }
        if (STATE.cd != null) {
          this._MAN._cd = STATE.cd; // comes with .yc
        }
        if (STATE.w != null) {
          // console.log STATE.w
          walking = 1 === STATE.w;
          running = 2 === STATE.w;
          this._MAN.gallop = running;
          this._MAN.moving = walking || running;
        }
        // console.log "gallop ", @_MAN.gallop
        /*if STATE.b?
        			has = !! STATE.b
        			console.log 'man has briefcase'
        			if has
        base = JSON.parse JSON.stringify @sprite
        base.hasShadow = false
        briefcase = JSON.parse JSON.stringify base
        briefcase.path = "nontile/man/briefcase.png"
        briefcase.hasShadow = true
        @briefcase = new gg.Sprite @props, gun
        @parts.push @briefcase
        @briefcase.build()
        			else
        i = @parts.indexOf @briefcase
        @parts.splice i, 1
        @briefcase.dtor()*/
        if (STATE.u != null) {
          // console.log 'using'
          this._MAN.using = STATE.u;
          this.hold(gg.weps[this._MAN.using] || null); // using
        }
        /*if STATE.outlaw?
        bandit = gg.loadSty "nontile/mobs/poncho.png"
        @sprite.skin = bandit
        @material.map = bandit
        @shadowMaterial.map = bandit*/
        if (STATE.r != null) {
          console.log('r');
          gg.play(gg.sounds.kungfu[2], this); // rrre? duno
        }
        if (STATE.d != null) {
          this.dead = true;
          this.frame(4, this.falls.y);
          this.sprite.elevation = 1;
          this.shadow.visible = false;
          if (this.dynamicBody != null) {
            gg.world.DestroyBody(this.dynamicBody);
          }
          this.dynamicBody = null;
          if (!first) {
            gg.play(gg.sounds.screams[STATE.d], this);
          }
        }
        if (STATE.h != null) {
          console.log('hit');
          gg.play(gg.sounds.kungfu[STATE.h], this);
        }
        if (STATE.g != null) {
          this._MAN.recoiling = 1;
          gg.anim.call(this.other, true);
          gg.play(gg.sounds[this._MAN.using], this, 100);
        }
        if (STATE.s != null) {
          console.log('slash');
          this._MAN.slashing = 1;
          gg.anim.call(this.slash, true);
          gg.anim.call(this.walkslash, true);
          gg.anim.call(this.runslash, true);
        }
        if ((STATE.a != null) && (STATE.d == null)) {
          gg.play(gg.sounds.hesgotagun[STATE.a], this);
        }
        if (STATE.fall != null) {
          this.floored = STATE.fall;
          this.sprite.elevation = 1;
          this.shadow.visible = false;
          if (this.dynamicBody != null) {
            gg.world.DestroyBody(this.dynamicBody);
          }
          this.dynamicBody = null;
        }
        if (STATE.up != null) {
          this.eating = false;
          this.swinging = false;
          this.recoil = false;
          this.floored = null;
          this.falls.i = 0;
          this.sprite.elevation = 2;
          this.shadow.visible = true;
          this.embody();
        }
        return 1;
      }

      hold(wep) {
        if (wep != null) {
          this._MAN.holding = (function() {
            switch (wep.type) {
              case 'SMG':
              case 'Carbine':
              case 'Shotgun':
              case 'AR':
              case 'DMR':
              case 'Sniper':
                return 'RIFLE';
              case 'Handgun':
                return 'GUN';
            }
          })();
          this.gun = `nontile/man/${wep.type.toLowerCase()}.png`;
        } else {
          this.gun = 'empty.png';
          this._MAN.holding = false;
        }
        this.material.uniforms.gun.value = gg.loadSty(this.gun);
        return 1;
      }

      animate() {
        var angle, anim, car, door, f, filter, flip, frame, range, ref, ref1, x, y;
        if (this.dead) {
          return 'freeze';
        }
        frame = 0;
        anim = null;
        if (this.floored != null) {
          this.frame(this.floored, this.falls.y);
          return;
        }
        if (this._MAN.opening) {
          door = (ref = this._MAN.car) != null ? ref.model.props.doors[this._MAN._cd.i || 0] : void 0;
          this.sprite.elevation = 3;
          flip = this._MAN._yc.f; // 'right' is door?.side
          
          // console.log flip
          frame = 0;
          anim = this.door;
          gg.anim.call(anim);
          frame = anim.i;
          if (anim.i === 0) {
            filter = this.fixture.GetFilterData();
            filter.categoryBits = gg.masks.none;
            filter.maskBits = gg.masks.none;
            this.fixture.SetFilterData(filter);
            if (this._MAN.car != null) {
              this.props.r = this._MAN.car.props.r;
            }
          }
          if (anim.i === 4) {
            frame = 3;
            gg.anim.call(this.sit, true);
            gg.anim.call(this.door, true);
            gg.anim.call(this.cardoor, true);
            this._MAN.opening = false;
            this._MAN.sitting = true;
            this._MAN.sat = false;
          }
          car = this._MAN.car;
          f = Math.abs(anim.i - 4);
          if (f !== 0) {
            if (car != null) {
              car.dooring(this._MAN._cd.i, f);
            }
          }
          if (this._MAN.opening && this._MAN.opening !== 2) {
            gg.play(gg.sounds.cardoor[0], this);
            this._MAN.opening = 2;
          }
        } else if (this._MAN.sitting) {
          flip = this._MAN._yc.f; // 'right' is door?.side
          this.sprite.elevation = 1;
          frame = 0;
          anim = this.sit;
          gg.anim.call(anim);
          frame = anim.i;
          x = this._MAN._cd.xx - this.props.x;
          y = this._MAN._cd.yy - this.props.y;
          range = Math.hypot(x, y);
          angle = Math.atan2(y, x);
          this.props.x += Math.cos(angle) * range / anim.frames / 4;
          this.props.y += Math.sin(angle) * range / anim.frames / 4;
          car = this._MAN.car || this.car;
          gg.anim.call(this.cardoor);
          // console.log @cardoor.i
          if (car != null) {
            car.dooring(this._MAN._cd.i, this.cardoor.i);
          }
          if (this.cardoor.i === 5 && this._MAN.sitting && this._MAN.sitting !== 2) {
            gg.play(gg.sounds.cardoor[1], this);
            this._MAN.sitting = 2;
          }
          if (this.cardoor.i === 5) {
            this.present(false);
            // console.log 'yay'
            this.car = this._MAN.car;
            this.freeze = false;
            this._MAN.sitting = false;
            if (this === gg.ply) {
              gg.net.out.BLEH = 1;
            }
            if ((ref1 = this.car) != null) {
              ref1.enter(this);
            }
            this._MAN.car = null;
          }
        } else if (this._MAN.slashing) {
          frame = 0;
          anim = this.slash;
          if (!this._MAN.gallop && this._MAN.moving) {
            anim = this.walkslash;
          }
          if (this._MAN.gallop && this._MAN.moving && !this.aim) {
            anim = this.runslash;
          }
          gg.anim.call(anim);
          frame = anim.i;
          if (anim.done) {
            this._MAN.slashing = false;
            gg.anim.call(anim, true);
            this.walk.i = 4;
            this.run.i = 4;
            anim = null;
          } else {
            this.slash.i = anim.i;
            this.slash.timer = anim.timer;
            this.walkslash.i = anim.i;
            this.walkslash.timer = anim.timer;
            this.runslash.i = anim.i;
            this.runslash.timer = anim.timer;
          }
        } else if (this._MAN.scratching) { // and (@_MAN.scratch.done? and not @_MAN.scratch.done)
          if (this._MAN.moving) {
            anim = null;
            gg.anim.call(this.scratch);
          } else {
            anim = this.scratch;
            gg.anim.call(anim, false);
            frame = anim.i;
            if (anim.done) {
              anim = null;
              // console.log 'end lol at '+i
              this._MAN.scratching = false;
              gg.anim.call(this.scratch, true);
            }
          }
        }
        // @scratch.inverse = false

        // set anim to null to trigger defualts
        if (anim == null) {
          anim = this.other;
          frame = 0;
          if (this._MAN.moving) {
            this._MAN.scratching = false;
            if (this._MAN.holding === 'GUN') {
              anim = this._MAN.gallop ? this.rungun : this.walkgun;
            } else if (this._MAN.holding === 'RIFLE') {
              anim = this._MAN.gallop ? this.runrifle : this.walkrifle;
            } else {
              anim = this._MAN.gallop ? this.run : this.walk;
            }
            gg.anim.call(anim);
            frame = anim.i;
          } else if (this._MAN.holding === 'GUN') {
            frame = 1;
          } else if (this._MAN.holding === 'RIFLE') {
            frame = 4;
          }
          if (!this._MAN.moving) {
            gg.anim.call(this.walk, true);
            gg.anim.call(this.run, true);
            if (this._MAN.recoiling) {
              gg.anim.call(this.other);
              if (anim.i === 2) {
                this._MAN.recoiling = 0;
              } else {
                frame += 1 + anim.i;
              }
            } else {
              gg.anim.call(this.other, true);
            }
          }
        }
        this.frame(frame, anim.y);
        if (flip) {
          gg.flipplane(this.geometry, 0);
        }
        return 0;
      }

      grubble() {
        // console.log 'lol'
        return 1;
      }

    };

    Man.prototype.shadow = new THREE.MeshPhongMaterial({
      alphaMap: gg.loadSty('nontile/man/alphamap.png'),
      aoMap: gg.loadSty('nontile/man/aomap.png'),
      color: 0x000000,
      opacity: .2,
      transparent: true
    });

    Man.prototype.parts = {
      // skins
      'wh': 'white',
      'zo': 'zombie',
      'ph': 'ponchohood',
      'gl': 'gloves',
      'le': 'leather',
      'su': 'surgical',
      'bl': 'black',
      
      // hairs
      'br': 'brown',
      'ba': 'bald',
      'Bl': 'blackhair',
      
      //shoes
      'lo': 'loafers',
      'sn': 'sneakers',
      'al': 'allstars',
      'dr': 'dress',
      
      // pants
      'je': 'jeans',
      'de': 'denim',
      'kh': 'khaki',
      // body
      'po': 'poncho',
      'sw': 'sweater',
      'bo': 'bomber',
      'pa': 'parka',
      'co': 'commando',
      'sh': 'shirt',
      
      // guns
      'hg': 'handgun',
      'sm': 'smg',
      'cb': 'carbine',
      'ar': 'ar',
      'sg': 'shotgun',
      'dm': 'dmr',
      'sp': 'sniper'
    };

    return Man;

  }).call(this);

}).call(this);
