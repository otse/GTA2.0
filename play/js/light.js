// Generated by CoffeeScript 2.3.0
(function() {
  // yellow			0xdbcb8a
  // warm				0xcfc392
  // snot 				0xc8d2a1
  // hallowed blue 	0xa1c2d2
  // graveyard purple  0x92a2cf
  gg._lights = 0;

  gg.Light = (function() {
    class Light extends gg.Entity {
      constructor(props) {
        super(props);
        this.type = 'Light';
        this.light = null;
        this.grid = true;
        this.color = 0xffffff;
        // isinterior = gg.interior? and gg.interior.name isnt @props.interior

        // notinterior = r.interior and (not gg.interior? or r.interior isnt gg.interior.name)

        // if isinterior or notinterior
        // console.warn 'this light isnt interior'
        // @valid = false
        // return
        this.shape();
        this.pose();
        gg.map.build = true;
      }

      pose() {
        var ref;
        if ((ref = this.light) != null) {
          ref.position.set((this.props.x * 64) + 32, (this.props.y * 64) + 32, (this.props.z * 64) + 32);
        }
        return 1;
      }

      shape() {
        var color, intensity, radius;
        intensity = this.props.interior ? 0.65 : 1.25;
        radius = this.props.interior ? 64 * 4 : 64 * 4;
        if (this.vjson.intensity) {
          intensity = this.vjson.intensity;
        }
        if (this.vjson.radius) {
          radius = this.vjson.radius * 64;
        }
        color = 0xdbcb8a;
        this.light = new THREE.PointLight(color, intensity, radius);
        this.light.castShadow = false;
        if (this.vjson.color != null) {
          this.light.color.setHex(this.vjson.color);
        }
        this.light._visual = this;
        // @light = null
        return 1;
      }

      reload() {
        this.light.color.setHex(this.vjson.color || 0xffffff);
        if (this.vjson.intensity != null) {
          this.light.intensity = this.vjson.intensity;
        }
        if (this.vjson.radius != null) {
          this.light.distance = this.vjson.radius * 64;
        }
        return 1;
      }

      build(solo = false) {
        return 0;
      }

      dtor() {
        var ref;
        if ((ref = this.light) != null) {
          ref._visual = null;
        }
        // super()
        return 1;
      }

    };

    Light.color = 0xfdff6c;

    return Light;

  }).call(this);

}).call(this);
