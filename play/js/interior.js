// Generated by CoffeeScript 2.3.0
(function() {
  var Intrblock, styles;

  styles = {
    'Ol\' Factory': {
      sty: 'interior/woody/902.bmp'
    },
    'Vault': {
      corner: 'metal/green/359b.bmp',
      rotates: true,
      middle: 'metal/green/358.bmp',
      left: 'metal/green/381.bmp',
      right: 'metal/green/381.bmp',
      front: 'metal/green/381.bmp', // 'metal/green/376.bmp'
      back: 'metal/green/381.bmp', // 'metal/green/376.bmp'
      foundation: 'floors/green/645.bmp',
      wall: 'metal/green/381.bmp'
    },
    'Hall': {
      corner: 'interior/hall/346.bmp',
      rotates: false,
      middle: 'interior/hall/346.bmp',
      left: 'interior/hall/346.bmp',
      right: 'interior/hall/346.bmp',
      front: 'interior/hall/346.bmp',
      back: 'interior/hall/346.bmp',
      foundation: 'interior/hall/346.bmp',
      wall: 'interior/hall/346.bmp'
    },
    'Lounge': {
      shininess: 30,
      sty: 'interior/lounge/sty.bmp',
      rotates: false
    }
  };

  gg.Interior = class Interior {
    constructor(name, style) {
      var b, c, i, j, k, l, len, len1, len2, len3, m, n, r, ref, ref1, ref2, ref3, v;
      this.name = name;
      this.style = style;
      this.hidden = [];
      this.visuals = [];
      this.floors = [];
      this.walls = [];
      this.doors = [];
      this.intrblocks = [];
      this.style = styles[this.style];
      ref = gg.map.actives;
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        ref1 = c.visuals;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          v = ref1[k];
          if (v.vjson == null) {
            continue;
          }
          
          //if v.type is 'Door' and v.vjson.to is @name
          //@doors.push v
          //v.pose true
          if (v.type === 'Block' && v.vjson.of === this.name) { // :)
            v.props.hide = true;
            this.hidden.push(v);
            if (v.vjson.floor === 0) {
              n = {
                type: 'Surface',
                chunk: c,
                shininess: this.style.shininess || 0,
                interior: this.name,
                // vjson: "{\"of\":\"#{@name}\"}"
                // sty: 'metal/green/359.bmp'
                x: v.props.x,
                y: v.props.y,
                z: v.props.z
              };
              this.floors.push(n);
              // c.addr n

              // foundation for see-through floors
              n = {
                type: 'Surface',
                // vjson: "{\"of\":\"#{@name}\"}"
                // interior: yes
                // sty: 'floors/green/645.bmp'
                x: v.props.x,
                y: v.props.y,
                z: v.props.z - .3
              };
            }
          }
        }
      }
      ref2 = this.floors;
      // c.addr n

      // @pieces.push n
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        r = ref2[l];
        b = {
          type: 'Block',
          // vjson: "{\"of\":\"#{@name}\"}"
          interior: this.name,
          x: r.x,
          y: r.y,
          z: r.z,
          right: this.style.right,
          left: this.style.left,
          front: this.style.front,
          back: this.style.back
        };
        ref3 = this.floors;
        // @walls.push b
        // @visuals.push r.chunk.addr b
        for (m = 0, len3 = ref3.length; m < len3; m++) {
          i = ref3[m];
          if (r.x === i.x && r.y === i.y + 1) {
            delete b.back;
          }
          if (r.x === i.x && r.y === i.y - 1) {
            delete b.front;
          }
          if (r.x === i.x + 1 && r.y === i.y) {
            delete b.left;
          }
          if (r.x === i.x - 1 && r.y === i.y) {
            delete b.right;
          }
        }
        r.sty = this.style.middle || this.style.sty;
        if (!this.style.rotates) {
          r.normal = true;
        }
        this.visuals.push(r.chunk.addr(r));
        // continue unless @style.corner
        if (b.left && b.front && !b.right && !b.back) {
          if (this.style.corner) {
            r.sty = this.style.corner;
            if (this.style.rotates) {
              r.r = 0;
            }
          }
          this.intrblocks.push(new Intrblock({
            x: r.x - 1,
            y: r.y,
            r: 0 * Math.PI
          }));
          this.intrblocks.push(new Intrblock({
            x: r.x,
            y: r.y + 1,
            r: 0 * Math.PI
          }));
        } else if (b.right && b.front && !b.left && !b.back) {
          if (this.style.corner) {
            r.sty = this.style.corner;
            if (this.style.rotates) {
              r.r = 1;
            }
          }
          this.intrblocks.push(new Intrblock({
            x: r.x + 1,
            y: r.y,
            r: 1 * Math.PI
          }));
          this.intrblocks.push(new Intrblock({
            x: r.x,
            y: r.y + 1,
            r: 1 * Math.PI
          }));
        } else if (b.right && b.back && !b.left && !b.front) {
          if (this.style.corner) {
            r.sty = this.style.corner;
            if (this.style.rotates) {
              r.r = 2;
            }
          }
          this.intrblocks.push(new Intrblock({
            x: r.x + 1,
            y: r.y,
            r: 2 * Math.PI
          }));
          this.intrblocks.push(new Intrblock({
            x: r.x,
            y: r.y - 1,
            r: 2 * Math.PI
          }));
        } else if (b.left && b.back && !b.right && !b.front) {
          if (this.style.corner) {
            r.sty = this.style.corner;
            if (this.style.rotates) {
              r.r = 3;
            }
          }
          this.intrblocks.push(new Intrblock({
            x: r.x - 1,
            y: r.y,
            r: 3 * Math.PI
          }));
          this.intrblocks.push(new Intrblock({
            x: r.x,
            y: r.y - 1,
            r: 3 * Math.PI
          }));
        }
      }
    }

    dtor() {
      var b, j, k, l, len, len1, len2, ref, ref1, ref2, v;
      ref = this.hidden;
      for (j = 0, len = ref.length; j < len; j++) {
        v = ref[j];
        delete v.props.hide;
      }
      ref1 = this.visuals;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        v = ref1[k];
        v.chunk.removev(v);
      }
      ref2 = this.intrblocks;
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        b = ref2[l];
        b.dtor();
      }
    }

  };

  Intrblock = class Intrblock {
    constructor(props) {
      var fd, x, y;
      this.bf = new box2d.b2BodyDef();
      this.bf.type = box2d.b2BodyType.b2_staticBody;
      x = ((props.x + .5) * 64) / gg.scaling;
      y = ((props.y + .5) * 64) / gg.scaling;
      this.bf.position.Set(x, y);
      this.polygonShape = new box2d.b2PolygonShape;
      this.polygonShape.SetAsBox(32 / gg.scaling, 32 / gg.scaling);
      fd = new box2d.b2FixtureDef;
      fd.shape = this.polygonShape;
      fd.filter.categoryBits = gg.masks.intrsolid;
      fd.filter.maskBits = gg.masks.introrganic;
      this.body = gg.world.CreateBody(this.bf);
      this.body.SetTransform(this.body.GetPosition(), props.r);
      this.fixture = this.body.CreateFixture(fd);
    }

    dtor() {
      gg.world.DestroyBody(this.body);
      return true;
    }

  };

}).call(this);
