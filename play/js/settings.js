// Generated by CoffeeScript 2.3.0
(function() {
  gg.Settings = (function() {
    class Settings {
      constructor() {
        gg.Settings.prototype.instance = this;
        this.link = $('<a href="javascript:;">Settings</a><br />');
        this.link.click(() => {
          return this.build();
        });
        $('#links').append(this.link);
      }

      build() {
        var content, experimental, fancyHeadlights, hotlineCam, localMaterials, prefab, ref, ref1, simpleShading, switches, tick;
        if ((ref = gg.Tour.prototype.instance) != null ? ref.built : void 0) {
          gg.Tour.prototype.instance.destroy();
        }
        if ((ref1 = gg.Notice.prototype.instance) != null ? ref1.built : void 0) {
          gg.Notice.prototype.instance.destroy();
        }
        if (this.built) {
          return;
        }
        this.built = true;
        this.settings = $('<div class="popup" id="settings"></div>');
        content = $("<div class=\"content\">");
        content.append('<p>Most options will momentarily freeze the game.</p>');
        experimental = ''; // "<span class=\"experimental\">experimental</span>"
        switches = $('<p class="switches"></p>');
        switches.append('-Chunks');
        prefab = $(`<div class="switch">cache/prefab chunks ${experimental}</div>`);
        tick = $(`<div class="tick ${(gg.settings.prefabChunks ? 'ya' : void 0)}"></div>`);
        tick.click(function() {
          var c, i, ref2, results, that;
          that = $(this);
          if (gg.settings.prefabChunks = !gg.settings.prefabChunks) {
            that.addClass('ya');
            gg.bubble(`OK...Built ${(Object.keys(gg.map.offChunks).length)} chunks (prefab)`);
            ref2 = gg.map.offChunks;
            results = [];
            for (i in ref2) {
              c = ref2[i];
              results.push(c.show(true));
            }
            return results;
          } else {
            that.removeClass('ya');
            gg.bubble('OK...Deep deleting prefabricated chunks');
            return gg.map.dtor(true);
          }
        });
        prefab.prepend(tick);
        //prefab.append $ "<div class=\"whatdoesitdo\">this may positively eliminate choppy chunkloading</div>"
        switches.append(prefab);
        localMaterials = $(`<div class="switch">local materials ${experimental}</div>`);
        tick = $(`<div class="tick ${(gg.settings.localMaterials ? 'ya' : void 0)}"></div>`);
        tick.click(function() {
          var that;
          that = $(this);
          if (gg.settings.localMaterials = !gg.settings.localMaterials) {
            that.addClass('ya');
            gg.bubble("OK...Each chunk reserves it own materials");
            gg.materials = {};
            return gg.map.dtor(true);
          } else {
            that.removeClass('ya');
            gg.bubble("OK...Sharing materials");
            gg.materials = {};
            return gg.map.dtor(true);
          }
        });
        localMaterials.prepend(tick);
        switches.append(localMaterials);
        switches.append('<br>-Gfx');
        hotlineCam = $("<div class=\"switch\">hotline cam</div>");
        tick = $(`<div class="tick ${(gg.settings.hotlineCam ? 'ya' : void 0)}"></div>`);
        tick.click(function() {
          var that;
          that = $(this);
          if (gg.settings.hotlineCam = !gg.settings.hotlineCam) {
            that.addClass('ya');
            return gg.camera.rotation.z = 0;
          } else {
            that.removeClass('ya');
            return gg.camera.rotation.z = 0;
          }
        });
        hotlineCam.prepend(tick);
        switches.append(hotlineCam);
        simpleShading = $("<div class=\"switch\">simple shading</div>");
        tick = $(`<div class="tick ${(gg.settings.simpleShading ? 'ya' : void 0)}"></div>`);
        tick.click(function() {
          var that;
          that = $(this);
          if (gg.settings.simpleShading = !gg.settings.simpleShading) {
            that.addClass('ya');
            gg.bubble('OK');
            gg.materials = {};
            return gg.map.dtor(true);
          } else {
            that.removeClass('ya');
            gg.bubble('OK...Advanced shades for you (h)');
            gg.materials = {};
            return gg.map.dtor(true);
          }
        });
        simpleShading.prepend(tick);
        switches.append(simpleShading);
        fancyHeadlights = $("<div class=\"switch\">fancy headlights</div>");
        tick = $(`<div class="tick ${(gg.settings.fancyHeadlights ? 'ya' : void 0)}"></div>`);
        tick.click(function() {
          var i, ref2, ref3, ref4, ref5, results, that, v;
          that = $(this);
          if (gg.settings.fancyHeadlights = !gg.settings.fancyHeadlights) {
            that.addClass('ya');
            ref3 = (ref2 = gg.net) != null ? ref2.visuals : void 0;
            // gg.bubble 'On'
            for (i in ref3) {
              v = ref3[i];
              if (v.type === 'Car') {
                v.lights();
              }
            }
            gg.materials = {};
            return gg.map.dtor(true);
          } else {
            that.removeClass('ya');
            // gg.bubble 'fancyHeadlights off'
            gg.materials = {};
            gg.map.dtor(true);
            ref5 = (ref4 = gg.net) != null ? ref4.visuals : void 0;
            results = [];
            for (i in ref5) {
              v = ref5[i];
              if (v.type === 'Car' && (v.headlights != null)) {
                gg.scene.remove(v.headlights);
                results.push(gg.scene.remove(v.headlights.target));
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        });
        fancyHeadlights.prepend(tick);
        switches.append(fancyHeadlights);
        this.settings.append(content);
        this.settings.append(switches);
        this.leave = $('<div class="option">close</div>');
        this.leave.click(() => {
          return this.destroy();
        });
        this.options = $('<div class="options"></div>');
        this.options.append(this.leave);
        this.settings.append(this.options);
        $('#overlay').append(this.settings);
        return true;
      }

      destroy() {
        this.settings.remove();
        this.built = false;
        return true;
      }

    };

    Settings.prototype.instance = null;

    return Settings;

  }).call(this);

}).call(this);
