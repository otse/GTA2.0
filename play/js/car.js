// Generated by CoffeeScript 2.3.0
(function() {
  // look below for cars
  /*_DELTAS =
  DentBehindLeft
  DentBehindRight
  DentFrontRight
  DentFrontLeft
  UnusedOriginalVehiclesHaveADentInTheRoofHere
  TailLightRight
  TailLightLeft
  HeadLightRight
  HeadLightLeft
  DriverDoorAlmostClosed
  DriverDoorSlightlyOpen
  DriverDoorAlmostOpen
  DriverDoorOpen
  PassengerDoorAlmostClosed
  PassengerDoorSlightlyOpen
  PassengerDoorAlmostOpen
  PassengerDoorOpen
  RearDoorLeftAlmostClosed
  RearDoorLeftSlightlyOpen
  RearDoorLeftAlmostOpen
  RearDoorLeftOpen
  RearDoorRightAlmostClosed
  RearDoorRightSlightlyOpen
  RearDoorRightAlmostOpen
  RearDoorRightOpen*/
  var _DELTAS;

  gg.Car = class Car extends gg.Sprite {
    constructor(props) {
      var _color, color, model, path, sprite;
      if (!(model = gg.Cars.TYPES[props.states.m])) {
        console.error(`bad car model \`${props.states.m}\``);
      }
      color = props.states.c || false;
      _color = color ? `_${color}` : '';
      path = `nontile/cars/${model.props.sty}${_color}.png`;
      gg.loadSty(`${(path.split('.png')[0])}_deltas.png`);
      sprite = {
        elevation: 2,
        path: path,
        normalPath: `nontile/cars/${model.props.sty}normal.png`,
        normal: true,
        hasShadow: true,
        sprite: {
          width: model.props.width,
          height: model.props.height
        }
      };
      super(props, sprite);
      this.path = path;
      this.deltas = {}; // assoc
      this.phys = {
        push: .1,
        spring: .0,
        slip: .0,
        slipness: 0,
        stiff: 0,
        lastr: props.r
      };
      this.engineon = false;
      this.readytime = 0;
      this.lastSound = null;
      this.lastb = false;
      this.color = color;
      this.driver = false;
      this.model = model;
      this.__car = {
        headlights: false,
        taillights: false
      };
      this.build();
      this.type = 'Car';
      this.tune = null;
      this.carengine = null;
      this.embody();
      gg.clonecarmaterial(this);
    }

    // @to = new THREE.AxisHelper
    // @from = new THREE.AxisHelper

    // gg.scene.add @to
    // gg.scene.add @from

    // override
    dtor() {
      var ref, ref1, ref2, ref3;
      if (gg.settings.fancyHeadlights) {
        gg.scene.remove(this.headlights);
      }
      if ((ref = this.deltas[_DELTAS.tail_light_left.nr]) != null) {
        ref.dtor();
      }
      if ((ref1 = this.deltas[_DELTAS.tail_light_right.nr]) != null) {
        ref1.dtor();
      }
      if ((ref2 = this.deltas[_DELTAS.head_light_left.nr]) != null) {
        ref2.dtor();
      }
      if ((ref3 = this.deltas[_DELTAS.head_light_right.nr]) != null) {
        ref3.dtor();
      }
      if (this.dynamicBody != null) {
        gg.world.DestroyBody(this.dynamicBody);
      }
      super.dtor();
      return 1;
    }

    embody() {
      if (this.dynamicBody != null) {
        gg.world.DestroyBody(this.dynamicBody);
      }
      this.bodyDef = new box2d.b2BodyDef();
      if (this.driver) {
        this.bodyDef.type = box2d.b2BodyType.b2_dynamicBody;
      } else {
        this.bodyDef.type = box2d.b2BodyType.b2_staticBody;
      }
      this.bodyDef.allowSleep = false;
      this.polygonShape = new box2d.b2PolygonShape;
      this.polygonShape.SetAsBox((this.model.props.sizew / 2) / gg.scaling, (this.model.props.sizeh / 2) / gg.scaling);
      this.fixtureDef = new box2d.b2FixtureDef;
      this.fixtureDef.shape = this.polygonShape;
      this.fixtureDef.density = 1;
      //@fixtureDef.filter.categoryBits = gta.masks.solid
      //@fixtureDef.filter.maskBits = -1
      this.bodyDef.position.Set(this.props.x / gg.scaling, this.props.y / gg.scaling);
      this.dynamicBody = gg.world.CreateBody(this.bodyDef);
      this.dynamicBody.CreateFixture(this.fixtureDef);
      this.dynamicBody.SetTransform(this.dynamicBody.GetPosition(), this.props.r);
      this.dynamicBody.SetLinearDamping(6);
      this.dynamicBody.SetAngularDamping(5);
      return true;
    }

    // override
    patch(o) {
      super.patch(o);
      this.state(o);
      return 1;
    }

    // override
    pose() {
      var k, ref, v;
      super.pose();
      ref = this.deltas;
      for (k in ref) {
        v = ref[k];
        v.pose();
      }
      return 1;
    }

    state(o, first) {
      var STATE, l, r;
      if (o.states == null) {
        return;
      }
      STATE = o.states;
      if (STATE.h != null) {
        gg.play(gg.sounds.impacts[STATE.h], this, 70);
      }
      if (STATE.l != null) {
        console.log(`headlights is ${STATE.l}`);
        if (0 === STATE.l && true === this.__car.headlights) {
          console.log('rmdelta lights');
          this.rmdelta(_DELTAS.head_light_left);
          this.rmdelta(_DELTAS.head_light_right);
          this.__car.headlights = false;
        } else if (1 === STATE.l && false === this.__car.headlights) {
          console.log('making lights');
          // a = @delta _DELTAS.Dent_behind_right
          l = this.delta(_DELTAS.head_light_left, 'Pale Nimbus');
          r = this.delta(_DELTAS.head_light_right, 'Pale Nimbus');
          gg.flipplane(l.geometry, 0, true);
          l.material.emissive = r.material.emissive = new THREE.Color(0x333333);
          this.__car.headlights = true;
        }
      }
      if (STATE.b != null) {
        console.log(`taillights is ${STATE.b}`);
        if (0 === STATE.b && true === this.__car.taillights) {
          this.rmdelta(_DELTAS.tail_light_left);
          this.rmdelta(_DELTAS.tail_light_right);
          this.__car.taillights = false;
        } else if (1 === STATE.b && false === this.__car.taillights) {
          l = this.delta(_DELTAS.tail_light_left, 'Radish');
          r = this.delta(_DELTAS.tail_light_right, 'Radish');
          gg.flipplane(l.geometry, 0, true);
          l.material.emissive = r.material.emissive = new THREE.Color(0x220000);
          this.__car.taillights = true;
        }
      }
      return true;
    }

    rmdelta(delta) {
      var ref;
      console.log('rmdelta ' + delta);
      if ((ref = this.deltas[delta.nr]) != null) {
        ref.dtor();
      }
      delete this.deltas[delta.nr];
      // @deltas[delta.nr] = null
      return 0;
    }

    delta(delta, salt) {
      var base, d, i, name, sprite, v;
      i = delta.nr;
      sprite = {
        elevation: 2,
        path: `${(this.path.split('.png')[0])}_deltas.png`,
        salt: salt,
        hasShadow: false,
        sprite: {
          width: this.model.props.width,
          height: this.model.props.height
        }
      };
      d = this.model.deltas[i];
      // todo use the lighter spriteclone ?
      v = (base = this.deltas)[name = `${i}`] != null ? base[name] : base[name] = new gg.Sprite(this.props, sprite);
      gg.posplane(v.geometry, 0, d.x, d.y, d.w, d.h);
      v.build(true);
      return v;
    }

    dooring(i, f) {
      var d, door, flip;
      door = this.model.props.doors[i];
      flip = 'right' === door.side;
      if (!flip) {
        if (i < 2) {
          switch (f) {
            case 0:
              this.rmdelta(_DELTAS.driver_door_open);
              break;
            case 1:
              this.rmdelta(_DELTAS.driver_door_almost_open);
              this.delta(_DELTAS.driver_door_open);
              break;
            case 2:
              this.rmdelta(_DELTAS.driver_door_open);
              this.rmdelta(_DELTAS.driver_door_slightly_open);
              this.delta(_DELTAS.driver_door_almost_open);
              break;
            case 3:
              this.rmdelta(_DELTAS.driver_door_almost_open);
              this.rmdelta(_DELTAS.driver_door_almost_closed);
              this.delta(_DELTAS.driver_door_slightly_open);
              break;
            case 4:
              this.rmdelta(_DELTAS.driver_door_slightly_open);
              this.delta(_DELTAS.driver_door_almost_closed);
              break;
            case 5:
              this.rmdelta(_DELTAS.driver_door_almost_closed);
          }
        } else {
          switch (f) {
            case 0:
              this.rmdelta(_DELTAS.rear_door_left_open);
              break;
            case 1:
              this.rmdelta(_DELTAS.rear_door_left_almost_open);
              this.delta(_DELTAS.rear_door_left_open);
              break;
            case 2:
              this.rmdelta(_DELTAS.rear_door_left_open);
              this.rmdelta(_DELTAS.rear_door_left_slightly_open);
              this.delta(_DELTAS.rear_door_left_almost_open);
              break;
            case 3:
              this.rmdelta(_DELTAS.rear_door_left_almost_open);
              this.rmdelta(_DELTAS.rear_door_left_almost_closed);
              this.delta(_DELTAS.rear_door_left_slightly_open);
              break;
            case 4:
              this.rmdelta(_DELTAS.rear_door_left_slightly_open);
              this.delta(_DELTAS.rear_door_left_almost_closed);
              break;
            case 5:
              this.rmdelta(_DELTAS.rear_door_left_almost_closed);
          }
        }
      } else {
        d = null;
        if (i < 2) {
          switch (f) {
            case 0:
              this.rmdelta(_DELTAS.passenger_door_open);
              break;
            case 1:
              this.rmdelta(_DELTAS.passenger_door_almost_open);
              d = this.delta(_DELTAS.passenger_door_open);
              break;
            case 2:
              this.rmdelta(_DELTAS.passenger_door_open);
              this.rmdelta(_DELTAS.passenger_door_slightly_open);
              d = this.delta(_DELTAS.passenger_door_almost_open);
              break;
            case 3:
              this.rmdelta(_DELTAS.passenger_door_almost_open);
              this.rmdelta(_DELTAS.passenger_door_almost_closed);
              d = this.delta(_DELTAS.passenger_door_slightly_open);
              break;
            case 4:
              this.rmdelta(_DELTAS.passenger_door_slightly_open);
              d = this.delta(_DELTAS.passenger_door_almost_closed);
              break;
            case 5:
              this.rmdelta(_DELTAS.passenger_door_almost_closed);
          }
        } else {
          switch (f) {
            case 0:
              this.rmdelta(_DELTAS.rear_door_right_open);
              break;
            case 1:
              this.rmdelta(_DELTAS.rear_door_right_almost_open);
              d = this.delta(_DELTAS.rear_door_right_open);
              break;
            case 2:
              this.rmdelta(_DELTAS.rear_door_right_open);
              this.rmdelta(_DELTAS.rear_door_right_slightly_open);
              d = this.delta(_DELTAS.rear_door_right_almost_open);
              break;
            case 3:
              this.rmdelta(_DELTAS.rear_door_right_almost_open);
              this.rmdelta(_DELTAS.rear_door_right_almost_closed);
              d = this.delta(_DELTAS.rear_door_right_slightly_open);
              break;
            case 4:
              this.rmdelta(_DELTAS.rear_door_right_slightly_open);
              d = this.delta(_DELTAS.rear_door_right_almost_closed);
              break;
            case 5:
              this.rmdelta(_DELTAS.rear_door_right_almost_closed);
          }
        }
        if (d != null) {
          gg.flipplane(d.geometry, 0, true);
        }
      }
      this.pose();
      return 0;
    }

    lights() {
      if (!(this.engineon && gg.settings.fancyHeadlights)) {
        return;
      }
      this.headlights = new THREE.SpotLight(0xffffff);
      this.headlights.intensity = 1;
      this.headlights.angle /= 2.5;
      this.headlights.penumbra = .25;
      this.headlights.decay = 1.5;
      this.headlights.distance = 64 * 5;
      gg.scene.add(this.headlights);
      gg.scene.add(this.headlights.target);
      return 1;
    }

    // override
    step() {
      /*to =
      	x: @props.x + @box.velocity.x
      	y: @props.y + @box.velocity.y

      delta =
      	x: @props.x - to.x
      	y: @props.y - to.y

      float = normalize @box.angle
      float /= Math.PI*2
      float += 1 if float < 0

      theta = Math.atan2 delta.y, delta.x

      go = ( theta / (Math.PI*2) ) + .5
      go -= .25
      go += 1 if go < 0

      dif = Math.abs float-go

      reversing = dif < 0.1 or dif > 0.9*/
      var a, b, motion, pos, r, rate, reversing, spring;
      if ((this.driver || this.passenger) && gg.keys[69] === 1) { // e
        this.exit();
        return;
      } else if (this.driver) {
        pos = this.dynamicBody.GetPosition();
        this.props.x = pos.x * gg.scaling;
        this.props.y = pos.y * gg.scaling;
        this.props.r = this.dynamicBody.GetAngle();
        this.pose();
        if (!this.engineon) {
          if (this.readytime <= Date.now()) {
            this.engineon = true;
            gg.zoom = gg.C.ZOOM.CAR;
            this.lights();
          } else {
            return;
          }
        }
      } else {
        /*if @engineon
        you.props.x = @props.x
        you.props.y = @props.y
        you.props.z = @props.z
        you.props.r = @props.r*/
        super.step();
        this.dynamicBody.SetPosition(new box2d.b2Vec2(this.props.x / gg.scaling, this.props.y / gg.scaling));
        this.dynamicBody.SetTransform(this.dynamicBody.GetPosition(), this.props.r);
        this.dynamicBody.SetAngularVelocity(0);
        this.dynamicBody.SetLinearVelocity(new box2d.b2Vec2(0, 0));
        this.pose();
        if (this.passenger) {
          gg.zoom = gg.C.ZOOM.CAR;
        }
        return;
      }
      /*you.props.x = @props.x
      you.props.y = @props.y
      you.props.z = @props.z
      you.props.r = @props.r*/
      if (gg.settings.fancyHeadlights) {
        a = gg.pivot(this.props.x, this.props.y - this.model.props.height / 2 + 32, this.props.r, this.props.x, this.props.y);
        this.headlights.position.set(a.x, a.y, this.props.z + 36);
        // @from.position.set a.x, a.y, @props.z+36
        a = gg.pivot(this.props.x, this.props.y - this.model.props.height / 2, this.props.r, this.props.x, this.props.y);
        this.headlights.target.position.set(a.x, a.y, this.props.z + 16);
      }
      // @to.position.set a.x, a.y, @props.z+16
      this.gas = !!gg.keys[87] && !gg.keys[83];
      this.brake = !!gg.keys[83] && !gg.keys[87];
      this.left = !!gg.keys[65] && !gg.keys[68];
      this.props.right = !!gg.keys[68] && !gg.keys[65];
      this.springing();
      // gg.net.out.d = @gas
      b = !this.gas && !this.reversing;
      if (this.lastb !== b) {
        gg.net.out.b = b;
      }
      this.lastb = b;
      this.reversing = this.gas;
      reversing = false;
      // turn
      if (this.phys.spring) {
        spring = this.phys.spring;
        if (reversing) {
          spring = -this.phys.spring;
        }
        // @phys.stiff = Math.abs( ( (@phys.push/@model.phys.max) *0.4 ) - 1)
        r = this.model.phys.drotate * spring; // * @phys.stiff
        motion = this.dynamicBody.GetLinearVelocity().Length();
        r *= (motion / 10) / this.model.wheelbase;
        this.dynamicBody.ApplyTorque(r * 100000);
      }
      if (this.phys.slipness > 0) {
        // @dynamicBody.ApplyAngularImpulse r * 10000

        // @dynamicBody.SetTransform @dynamicBody.GetPosition(), @props.r + r
        //Matter.Body.rotate @box, r

        // slippery tarmac
        this.phys.slipness -= 0.05;
      }
      this.phys.slip = Math.abs(this.phys.lastr - this.props.r) * (this.phys.push / this.model.phys.max) * 10;
      if (this.phys.slip >= .5) {
        this.phys.push -= this.model.phys.dslip * .01666;
        if (this.phys.slipness < 1) {
          this.phys.slipness += 0.2;
        }
      }
      // @box.frictionAir = @model.phys.airFriction - (@phys.slipness * 0.02 )

      // push pull
      if (this.gas && this.phys.push < this.model.phys.max) {
        this.phys.push += this.model.phys.daccelerate * .01666;
        if (this.phys.push < 0) {
          this.phys.push += this.model.phys.dbrake * .01666;
        }
      } else if (this.brake) {
        this.dobrake();
      }
      this.propel();
      rate = this.phys.push / 10;
      //@carengine._rate = rate
      this.phys.lastr = this.props.r;
      super.step();
      return true;
    }

    springing() {
      var damp;
      damp = 0.1;
      if (this.left) {
        this.phys.spring = this.phys.spring < 1 ? this.phys.spring + damp : 1;
      } else if (this.props.right) {
        this.phys.spring = this.phys.spring > -1 ? this.phys.spring - damp : -1;
      } else if (this.phys.spring) {
        if (this.phys.spring > 0) {
          this.phys.spring = this.phys.spring - damp < 0 ? 0 : this.phys.spring - damp;
        } else if (this.phys.spring < 0) {
          this.phys.spring = this.phys.spring + damp > 0 ? 0 : this.phys.spring + damp;
        }
      }
      return true;
    }

    dobrake() {
      if (this.phys.push > 0) { // brake
        this.reversing = false;
        if (this.phys.push - (this.model.phys.dbrake * .01666) > 0) {
          this.phys.push -= this.model.phys.dbrake * .01666;
        } else {
          this.phys.push = 0; // reverse
        }
      } else {
        this.reversing = true;
        if (this.phys.push > -this.model.phys.bmax && this.phys.push - (this.model.phys.dreverse * .01666) > -this.model.phys.bmax) {
          this.phys.push -= this.model.phys.dreverse * .01666;
        } else {
          this.phys.push = -this.model.phys.bmax;
        }
      }
      return true;
    }

    propel() {
      var angle, droll, m, to, x, y;
      if (!this.gas && !this.brake) {
        droll = this.model.phys.droll * .01666;
        if (this.phys.push - droll > 0) {
          this.phys.push -= droll;
        } else if (this.phys.push + droll < 0) {
          this.phys.push += droll;
        } else {
          this.phys.push = 0;
        }
      }
      //@stopengine()
      angle = this.props.r - (Math.PI / 2);
      m = 150;
      x = (this.phys.push * m) * Math.cos(angle);
      y = (this.phys.push * m) * Math.sin(angle);
      to = new box2d.b2Vec2(x, y);
      // @dynamicBody.ApplyLinearImpulse to, @dynamicBody.GetWorldCenter()
      this.dynamicBody.ApplyForce(to, this.dynamicBody.GetWorldCenter());
      //Matter.Body.applyForce @box, {x:x,y:y}, {x:x,y:y}
      return true;
    }

    reset() {
      this.phys.push = 0;
      this.phys.spring = 0;
      this.phys.slip = 0;
      this.phys.stiff = 0;
      return 1;
    }

    enter(man) {
      if (man !== gg.ply) {
        return;
      }
      this.reset();
      this.passenger = 0 !== man._MAN._cd.i;
      this.driver = !this.passenger;
      if (!this.passenger) {
        gg.bubble('You\'re driving.');
        this.props.net = false;
      } else {
        gg.bubble('This is a passenger seat.');
        this.props.net = true;
      }
      this.embody();
      man.car = this;
      /*man.props.x = @props.x
      man.props.y = @props.y
      man.props.z = @props.z
      man.props.r = @props.r*/
      gg.ply = this;
      // gg.net.out.CAR = [@props.x, @props.y, @props.r, @props.z] # this wasnt that useful / implied
      this.readytime = Date.now() + 750; // time before you can use the vehicle
      return true;
    }

    exit() {
      var cb;
      // return unless man is gg.ply
      this.props.net = true;
      gg.net.out.EXITCAR = true;
      this.passenger = false;
      this.driver = false;
      if (gg.settings.fancyHeadlights) {
        gg.scene.remove(this.headlights);
        gg.scene.remove(this.headlights.target);
      }
      gg.play(gg.sounds.cardoor[0], this);
      cb = () => {
        return gg.play(gg.sounds.cardoor[1], this);
      };
      setTimeout(cb, 600);
      gg.zoom = gg.C.ZOOM.PED;
      this.readytime = 0;
      this.engineon = false;
      gg.net.out.CAR = [
        this.props.x,
        this.props.y,
        this.props.r,
        this.props.z // last car coords before on foot
      ];
      return 1;
    }

  };

  /*raise: ->
  gg.Sprite::raycaster.ray.origin.copy new THREE.Vector3 @props.x, @props.y, @props.z+1
  hit = gg.Sprite::raycaster.intersectObject @on.mesh

  @props.z = hit[0]?.point?.z+1 or @on.raise.mean

  0*/
  gg.Cars = class Cars {
    constructor(props1) {
      var H, W, Y, h, k, max, v, w, x, y;
      this.props = props1;
      if (this.props.colors == null) {
        this.props.colors = [];
      }
      this.speed = this.props.speed || .5;
      this.wheelbase = this.props.wheelbase || 2;
      this.handling = this.props.handling || .5;
      this.weight = this.props.weight || 0.001 * 15;
      this.grip = this.props.grip || .5;
      max = this.speed * 10; // catalysts for physic vars psychic
      this.phys = {
        max: max,
        bmax: max / 2.5,
        drotate: this.props.handling / 100,
        daccelerate: max / 2.5,
        dbrake: max * 2,
        dreverse: max / 4,
        droll: max / 3, // how much a car rolls out
        dslip: max * 2.5,
        airFriction: (this.grip * .02) + 0.04
      };
      this.deltas = {}; // assoc
      for (k in _DELTAS) {
        v = _DELTAS[k];
        Y = v.y === 1 ? 0 : 1;
        W = this.props.width * 10 + 9 * 4;
        H = this.props.height * 2 + 4;
        x = v.x * this.props.width + v.x * 4;
        y = Y * this.props.height + Y * 4;
        w = this.props.width;
        h = this.props.height;
        this.deltas[`${v.nr}`] = {
          x: x / W,
          y: y / H,
          w: w / W,
          h: h / H
        };
      }
    }

  };

  gg.Cars.TYPES = {};

  _DELTAS = {
    dent_behind_left: {
      nr: '1',
      x: 0,
      y: 0
    },
    dent_behind_right: {
      nr: '2',
      x: 1,
      y: 0
    },
    dent_front_right: {
      nr: '3',
      x: 2,
      y: 0
    },
    dent_front_left: {
      nr: '4',
      x: 3,
      y: 0
    },
    unused_original_vehicles_have_a_dent_in_the_roof_here: {
      nr: '5',
      x: 4,
      y: 0
    },
    tail_light_right: {
      nr: '6',
      x: 5,
      y: 0
    },
    tail_light_left: {
      nr: '6.5',
      x: 5,
      y: 0
    },
    head_light_right: {
      nr: '7',
      x: 6,
      y: 0
    },
    head_light_left: {
      nr: '7.5',
      x: 6,
      y: 0
    },
    driver_door_almost_closed: {
      nr: '8',
      x: 7,
      y: 0
    },
    driver_door_slightly_open: {
      nr: '9',
      x: 8,
      y: 0
    },
    driver_door_almost_open: {
      nr: '10',
      x: 9,
      y: 0
    },
    driver_door_open: {
      nr: '11',
      x: 0,
      y: 1
    },
    passenger_door_almost_closed: {
      nr: '8.5',
      x: 7,
      y: 0
    },
    passenger_door_slightly_open: {
      nr: '9.5',
      x: 8,
      y: 0
    },
    passenger_door_almost_open: {
      nr: '10.5',
      x: 9,
      y: 0
    },
    passenger_door_open: {
      nr: '11.5',
      x: 0,
      y: 1
    },
    rear_door_left_almost_closed: {
      nr: '12',
      x: 1,
      y: 1
    },
    rear_door_left_slightly_open: {
      nr: '13',
      x: 2,
      y: 1
    },
    rear_door_left_almost_open: {
      nr: '14',
      x: 3,
      y: 1
    },
    rear_door_left_open: {
      nr: '15',
      x: 4,
      y: 1
    },
    rear_door_right_almost_closed: {
      nr: '12.5',
      x: 1,
      y: 1
    },
    rear_door_right_slightly_open: {
      nr: '13.5',
      x: 2,
      y: 1
    },
    rear_door_right_almost_open: {
      nr: '14.5',
      x: 3,
      y: 1
    },
    rear_door_right_open: {
      nr: '15.5',
      x: 4,
      y: 1
    }
  };

}).call(this);
