// Generated by CoffeeScript 2.3.0
(function() {
  var intrrotations, rotations;

  rotations = [[0, 31.95], [31.95, 0], [0, -31.95], [-31.95, 0]];

  intrrotations = [[0, 32.05], [32.05, 0], [0, -32.05], [-32.05, 0]];

  gg.Door = class Door extends gg.Visual {
    constructor(props) {
      super(props);
      this.type = 'Door';
      gg.door = this; // debug
      this.path = 'zaibatsu';
      if (this.vjson.door != null) {
        this.path = this.vjson.door;
      }
      this.path = `nontile/doors/${this.path}.png`;
      this.shape();
      this.pose();
    }

    build() {
      // return if @vjson.door is 'hidden' and not gg.ed?
      gg.scene.add(this.mesh);
      return true;
    }

    dtor() {
      gg.scene.remove(this.mesh);
      return true;
    }

    step() {
      return 0;
    }

    pose() {
      var intr, r;
      intr = (gg.interior != null) && this.vjson.to === gg.interior.name;
      r = !intr ? rotations : intrrotations;
      if (this.vjson.door === 'hidden' && !intr) {
        this.material.opacity = 0;
      }
      this.mesh.position.x = (this.props.x * 64) + 32 + r[this.props.r][0];
      this.mesh.position.y = (this.props.y * 64) + 32 + r[this.props.r][1];
      this.mesh.position.z = (this.props.z * 64) + 24;
      this.mesh.rotation.x = Math.PI / 2;
      this.mesh.rotation.y = -(Math.PI / 2) * this.props.r;
      return true;
    }

    shape() {
      this.material = gg.material(this.path);
      if ('hidden' === this.vjson.door) {
        this.material.color.setHex(0x060606);
      }
      this.geometry = new THREE.PlaneBufferGeometry(32, 48, 1);
      this.mesh = new THREE.Mesh(this.geometry, this.material);
      this.mesh.ggsolid = this; // arb prop
      return true;
    }

  };

}).call(this);
