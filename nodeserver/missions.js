// Generated by CoffeeScript 2.3.0
(function() {
  var Hotline, Mission, missions;

  missions = {};

  Mission = (function() {
    var doublecolon;

    class Mission {
      constructor(ses1) {
        this.ses = ses1;
      }

      cleanup() {
        return 0;
      }

      fetch() {
        var query, that;
        query = `SELECT * FROM \`accounts\` WHERE x >= ${this.ux} AND y >= ${this.uy} AND x < ${this.uex} AND y < ${this.uey}`;
        that = this;
        gta.db.query(query, function(err, rows) {
          that.take(rows);
        });
        return 0;
      }

      take(param) {
        this.data = 0;
        return true;
      }

    };

    doublecolon = true;

    return Mission;

  }).call(this);

  Hotline = (function() {
    class Hotline extends Mission {
      constructor(ses) {
        var a, cb, ch, i, p, parkingspaces;
        super(ses);
        this.stage = Hotline.prototype.STAGES.GO_TO_RENTAL;
        this.failed = false;
        this.drivehere = {
          x: 530,
          y: 270
        };
        this.spawn = null;
        this.spawned = false;
        this.rental = null;
        parkingspaces = gta.nearestparkingspacesbych[this.ses.ply.at.hash];
        this.ses.bubbles.push("<span style='color: gold; ffont-size: 12px'>Mission: 'Tis not too late to seek a newer world</span>");
        for (i in parkingspaces) {
          p = parkingspaces[i];
          if (p.v.vjson.type !== 'spawn') {
            continue;
          }
          ch = gta.chunks[p.v.hash];
          if ((ch != null) && ch.observed) {
            continue;
          }
          if (p.v.mission != null) {
            continue; // already taken
          }
          console.log(`took spawn ${p.v.id}`.cyan);
          this.spawn = p.v;
          p.v.mission = this;
          break;
        }
        a = this;
        cb = function() {
          return a.first();
        };
        setTimeout(cb, 2000);
      }

      first() {
        if (this.spawn == null) {
          this.ses.bubbles.push("<span style='color: gold'>No free parking spots to spawn your car, mission can\'t start</span>");
          return;
        }
        this.ses.out.TARGET = {
          x: this.spawn.props.x,
          y: this.spawn.props.y
        };
        this.ses.bubbles.push("<span style='color: gold'>Get to the rental</span>");
        return 0;
      }

      fail() {
        this.failed = true;
        this.cleanup();
        return 0;
      }

      cleanup() {
        super.cleanup();
        this.ses.out.NOTARGET = 1;
        if (this.spawn != null) {
          this.spawn.mission = null;
          this.spawn = null;
        }
        if (this.rental != null) {
          this.rental.mission = null;
          this.rental.owner = null;
          this.rental = null;
        }
        return 0;
      }

      callback(v, event) {
        var rental;
        if (this.failed) {
          return;
        }
        if (v.type === 'Parking space' && event === 'peekaboo') {
          if (this.spawned) {
            return;
          }
          rental = {
            x: v.props.x,
            y: v.props.y,
            z: 64,
            r: v.vjson.r,
            model: 'Bug',
            color: 'blue'
          };
          this.rental = new gta.Car(rental);
          this.rental.volatile = true;
          this.rental.owner = this.ses.ply;
          this.rental.mission = this;
          this.spawned = true;
        } else if (v.type === 'Car' && event === 'dtor') {
          if (this.stage === Hotline.prototype.STAGES.GO_TO_RENTAL) {
            this.spawned = false;
            console.log('car unspawned');
          } else if (this.stage === Hotline.prototype.STAGES.DRIVE_TO_PLACE) {
            this.ses.bubbles.push("<span style='color: gold'>You lost your car</span>");
            this.fail();
            return;
          }
          this.spawned = false;
        }
        return 0;
      }

      step() {
        var range;
        if (this.failed) {
          return;
        }
        if (this.stage === Hotline.prototype.STAGES.GO_TO_RENTAL && (this.ses.ply.car != null) && this.ses.ply.car === this.rental) {
          this.ses.out.TARGET = {
            x: this.drivehere.x,
            y: this.drivehere.y
          };
          this.ses.bubbles.push("<span style='color: gold'>And oh, please don't hurt the car</span>");
          this.spawn.mission = null;
          this.spawn = null;
          this.stage = Hotline.prototype.STAGES.DRIVE_TO_PLACE;
        } else if (this.stage === Hotline.prototype.STAGES.DRIVE_TO_PLACE) {
          range = Math.hypot(this.ses.ply.props.x - this.drivehere.x, this.ses.ply.props.y - this.drivehere.y);
          if (range < 48) {
            this.stage = Hotline.prototype.STAGES.GO_INSIDE;
            this.ses.bubbles.push("<span style='color: gold'>You've arrived</span>");
          }
        } else if (this.stage === Hotline.prototype.STAGES.GO_INSIDE) {
          this.ses.out.NOTARGET = 1;
          this.stage = Hotline.prototype.STAGES.FOUR;
          this.cleanup();
        }
        return 0;
      }

      briefing() {
        return 'Hotline miami mp? Or is it just me?';
      }

    };

    Hotline.prototype.STAGES = {
      GO_TO_RENTAL: 1,
      DRIVE_TO_PLACE: 2,
      GO_INSIDE: 3,
      FOUR: 4
    };

    return Hotline;

  }).call(this);

  missions.Mission = Mission;

  missions.Hotline = Hotline;

  module.exports = missions;

}).call(this);
